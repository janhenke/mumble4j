// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MumbleUDP.proto

package MumbleUDP;

public final class MumbleUDP {
  private MumbleUDP() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AudioOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MumbleUDP.Audio)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
     * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
     * and all other targets are understood as shout/whisper targets that have previously been registered via a
     * VoiceTarget message (via TCP).
     * </pre>
     *
     * <code>uint32 target = 1;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
     * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
     * and all other targets are understood as shout/whisper targets that have previously been registered via a
     * VoiceTarget message (via TCP).
     * </pre>
     *
     * <code>uint32 target = 1;</code>
     * @return The target.
     */
    int getTarget();

    /**
     * <pre>
     * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
     * 0: Normal speech
     * 1: Shout to channel
     * 2: Whisper to user
     * 3: Received via channel listener
     * </pre>
     *
     * <code>uint32 context = 2;</code>
     * @return Whether the context field is set.
     */
    boolean hasContext();
    /**
     * <pre>
     * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
     * 0: Normal speech
     * 1: Shout to channel
     * 2: Whisper to user
     * 3: Received via channel listener
     * </pre>
     *
     * <code>uint32 context = 2;</code>
     * @return The context.
     */
    int getContext();

    /**
     * <pre>
     * The session of the client (sender) this audio was originally sent from. This field is not required when sending
     * audio to the server, but will always be set when receiving audio from the server.
     * </pre>
     *
     * <code>uint32 sender_session = 3;</code>
     * @return The senderSession.
     */
    int getSenderSession();

    /**
     * <pre>
     * The number of the first contained audio frame (indicating the position of that frame in the overall audio stream)
     * </pre>
     *
     * <code>uint64 frame_number = 4;</code>
     * @return The frameNumber.
     */
    long getFrameNumber();

    /**
     * <pre>
     * The actual voice data payload in the Opus format.
     * </pre>
     *
     * <code>bytes opus_data = 5;</code>
     * @return The opusData.
     */
    com.google.protobuf.ByteString getOpusData();

    /**
     * <pre>
     * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
     * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
     * </pre>
     *
     * <code>repeated float positional_data = 6;</code>
     * @return A list containing the positionalData.
     */
    java.util.List<java.lang.Float> getPositionalDataList();
    /**
     * <pre>
     * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
     * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
     * </pre>
     *
     * <code>repeated float positional_data = 6;</code>
     * @return The count of positionalData.
     */
    int getPositionalDataCount();
    /**
     * <pre>
     * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
     * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
     * </pre>
     *
     * <code>repeated float positional_data = 6;</code>
     * @param index The index of the element to return.
     * @return The positionalData at the given index.
     */
    float getPositionalData(int index);

    /**
     * <pre>
     * A volume adjustment determined by the server for this audio packet. It is up to the client to apply this adjustment to
     * the resulting audio (or not). Note: A value of 0 means that this field is unset.
     * </pre>
     *
     * <code>float volume_adjustment = 7;</code>
     * @return The volumeAdjustment.
     */
    float getVolumeAdjustment();

    /**
     * <pre>
     * A flag indicating whether this audio packet represents the end of transmission for the current audio stream
     * </pre>
     *
     * <code>bool is_terminator = 16;</code>
     * @return The isTerminator.
     */
    boolean getIsTerminator();

    public MumbleUDP.Audio.HeaderCase getHeaderCase();
  }
  /**
   * Protobuf type {@code MumbleUDP.Audio}
   */
  public static final class Audio extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MumbleUDP.Audio)
      AudioOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Audio.newBuilder() to construct.
    private Audio(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Audio() {
      opusData_ = com.google.protobuf.ByteString.EMPTY;
      positionalData_ = emptyFloatList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Audio();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Audio(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              header_ = input.readUInt32();
              headerCase_ = 1;
              break;
            }
            case 16: {
              header_ = input.readUInt32();
              headerCase_ = 2;
              break;
            }
            case 24: {

              senderSession_ = input.readUInt32();
              break;
            }
            case 32: {

              frameNumber_ = input.readUInt64();
              break;
            }
            case 42: {

              opusData_ = input.readBytes();
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                positionalData_ = newFloatList();
                mutable_bitField0_ |= 0x00000001;
              }
              positionalData_.addFloat(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                positionalData_ = newFloatList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                positionalData_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 61: {

              volumeAdjustment_ = input.readFloat();
              break;
            }
            case 128: {

              isTerminator_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          positionalData_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MumbleUDP.internal_static_MumbleUDP_Audio_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MumbleUDP.internal_static_MumbleUDP_Audio_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MumbleUDP.Audio.class, MumbleUDP.Audio.Builder.class);
    }

    private int headerCase_ = 0;
    private java.lang.Object header_;
    public enum HeaderCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      TARGET(1),
      CONTEXT(2),
      HEADER_NOT_SET(0);
      private final int value;
      private HeaderCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static HeaderCase valueOf(int value) {
        return forNumber(value);
      }

      public static HeaderCase forNumber(int value) {
        switch (value) {
          case 1: return TARGET;
          case 2: return CONTEXT;
          case 0: return HEADER_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public HeaderCase
    getHeaderCase() {
      return HeaderCase.forNumber(
          headerCase_);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    /**
     * <pre>
     * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
     * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
     * and all other targets are understood as shout/whisper targets that have previously been registered via a
     * VoiceTarget message (via TCP).
     * </pre>
     *
     * <code>uint32 target = 1;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return headerCase_ == 1;
    }
    /**
     * <pre>
     * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
     * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
     * and all other targets are understood as shout/whisper targets that have previously been registered via a
     * VoiceTarget message (via TCP).
     * </pre>
     *
     * <code>uint32 target = 1;</code>
     * @return The target.
     */
    @java.lang.Override
    public int getTarget() {
      if (headerCase_ == 1) {
        return (java.lang.Integer) header_;
      }
      return 0;
    }

    public static final int CONTEXT_FIELD_NUMBER = 2;
    /**
     * <pre>
     * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
     * 0: Normal speech
     * 1: Shout to channel
     * 2: Whisper to user
     * 3: Received via channel listener
     * </pre>
     *
     * <code>uint32 context = 2;</code>
     * @return Whether the context field is set.
     */
    @java.lang.Override
    public boolean hasContext() {
      return headerCase_ == 2;
    }
    /**
     * <pre>
     * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
     * 0: Normal speech
     * 1: Shout to channel
     * 2: Whisper to user
     * 3: Received via channel listener
     * </pre>
     *
     * <code>uint32 context = 2;</code>
     * @return The context.
     */
    @java.lang.Override
    public int getContext() {
      if (headerCase_ == 2) {
        return (java.lang.Integer) header_;
      }
      return 0;
    }

    public static final int SENDER_SESSION_FIELD_NUMBER = 3;
    private int senderSession_;
    /**
     * <pre>
     * The session of the client (sender) this audio was originally sent from. This field is not required when sending
     * audio to the server, but will always be set when receiving audio from the server.
     * </pre>
     *
     * <code>uint32 sender_session = 3;</code>
     * @return The senderSession.
     */
    @java.lang.Override
    public int getSenderSession() {
      return senderSession_;
    }

    public static final int FRAME_NUMBER_FIELD_NUMBER = 4;
    private long frameNumber_;
    /**
     * <pre>
     * The number of the first contained audio frame (indicating the position of that frame in the overall audio stream)
     * </pre>
     *
     * <code>uint64 frame_number = 4;</code>
     * @return The frameNumber.
     */
    @java.lang.Override
    public long getFrameNumber() {
      return frameNumber_;
    }

    public static final int OPUS_DATA_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString opusData_;
    /**
     * <pre>
     * The actual voice data payload in the Opus format.
     * </pre>
     *
     * <code>bytes opus_data = 5;</code>
     * @return The opusData.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOpusData() {
      return opusData_;
    }

    public static final int POSITIONAL_DATA_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.FloatList positionalData_;
    /**
     * <pre>
     * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
     * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
     * </pre>
     *
     * <code>repeated float positional_data = 6;</code>
     * @return A list containing the positionalData.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getPositionalDataList() {
      return positionalData_;
    }
    /**
     * <pre>
     * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
     * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
     * </pre>
     *
     * <code>repeated float positional_data = 6;</code>
     * @return The count of positionalData.
     */
    public int getPositionalDataCount() {
      return positionalData_.size();
    }
    /**
     * <pre>
     * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
     * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
     * </pre>
     *
     * <code>repeated float positional_data = 6;</code>
     * @param index The index of the element to return.
     * @return The positionalData at the given index.
     */
    public float getPositionalData(int index) {
      return positionalData_.getFloat(index);
    }
    private int positionalDataMemoizedSerializedSize = -1;

    public static final int VOLUME_ADJUSTMENT_FIELD_NUMBER = 7;
    private float volumeAdjustment_;
    /**
     * <pre>
     * A volume adjustment determined by the server for this audio packet. It is up to the client to apply this adjustment to
     * the resulting audio (or not). Note: A value of 0 means that this field is unset.
     * </pre>
     *
     * <code>float volume_adjustment = 7;</code>
     * @return The volumeAdjustment.
     */
    @java.lang.Override
    public float getVolumeAdjustment() {
      return volumeAdjustment_;
    }

    public static final int IS_TERMINATOR_FIELD_NUMBER = 16;
    private boolean isTerminator_;
    /**
     * <pre>
     * A flag indicating whether this audio packet represents the end of transmission for the current audio stream
     * </pre>
     *
     * <code>bool is_terminator = 16;</code>
     * @return The isTerminator.
     */
    @java.lang.Override
    public boolean getIsTerminator() {
      return isTerminator_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (headerCase_ == 1) {
        output.writeUInt32(
            1, (int)((java.lang.Integer) header_));
      }
      if (headerCase_ == 2) {
        output.writeUInt32(
            2, (int)((java.lang.Integer) header_));
      }
      if (senderSession_ != 0) {
        output.writeUInt32(3, senderSession_);
      }
      if (frameNumber_ != 0L) {
        output.writeUInt64(4, frameNumber_);
      }
      if (!opusData_.isEmpty()) {
        output.writeBytes(5, opusData_);
      }
      if (getPositionalDataList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(positionalDataMemoizedSerializedSize);
      }
      for (int i = 0; i < positionalData_.size(); i++) {
        output.writeFloatNoTag(positionalData_.getFloat(i));
      }
      if (java.lang.Float.floatToRawIntBits(volumeAdjustment_) != 0) {
        output.writeFloat(7, volumeAdjustment_);
      }
      if (isTerminator_ != false) {
        output.writeBool(16, isTerminator_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (headerCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              1, (int)((java.lang.Integer) header_));
      }
      if (headerCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              2, (int)((java.lang.Integer) header_));
      }
      if (senderSession_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, senderSession_);
      }
      if (frameNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, frameNumber_);
      }
      if (!opusData_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, opusData_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPositionalDataList().size();
        size += dataSize;
        if (!getPositionalDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        positionalDataMemoizedSerializedSize = dataSize;
      }
      if (java.lang.Float.floatToRawIntBits(volumeAdjustment_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, volumeAdjustment_);
      }
      if (isTerminator_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, isTerminator_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof MumbleUDP.Audio)) {
        return super.equals(obj);
      }
      MumbleUDP.Audio other = (MumbleUDP.Audio) obj;

      if (getSenderSession()
          != other.getSenderSession()) return false;
      if (getFrameNumber()
          != other.getFrameNumber()) return false;
      if (!getOpusData()
          .equals(other.getOpusData())) return false;
      if (!getPositionalDataList()
          .equals(other.getPositionalDataList())) return false;
      if (java.lang.Float.floatToIntBits(getVolumeAdjustment())
          != java.lang.Float.floatToIntBits(
              other.getVolumeAdjustment())) return false;
      if (getIsTerminator()
          != other.getIsTerminator()) return false;
      if (!getHeaderCase().equals(other.getHeaderCase())) return false;
      switch (headerCase_) {
        case 1:
          if (getTarget()
              != other.getTarget()) return false;
          break;
        case 2:
          if (getContext()
              != other.getContext()) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SENDER_SESSION_FIELD_NUMBER;
      hash = (53 * hash) + getSenderSession();
      hash = (37 * hash) + FRAME_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFrameNumber());
      hash = (37 * hash) + OPUS_DATA_FIELD_NUMBER;
      hash = (53 * hash) + getOpusData().hashCode();
      if (getPositionalDataCount() > 0) {
        hash = (37 * hash) + POSITIONAL_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getPositionalDataList().hashCode();
      }
      hash = (37 * hash) + VOLUME_ADJUSTMENT_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVolumeAdjustment());
      hash = (37 * hash) + IS_TERMINATOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsTerminator());
      switch (headerCase_) {
        case 1:
          hash = (37 * hash) + TARGET_FIELD_NUMBER;
          hash = (53 * hash) + getTarget();
          break;
        case 2:
          hash = (37 * hash) + CONTEXT_FIELD_NUMBER;
          hash = (53 * hash) + getContext();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static MumbleUDP.Audio parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MumbleUDP.Audio parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MumbleUDP.Audio parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MumbleUDP.Audio parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MumbleUDP.Audio parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MumbleUDP.Audio parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MumbleUDP.Audio parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static MumbleUDP.Audio parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static MumbleUDP.Audio parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static MumbleUDP.Audio parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static MumbleUDP.Audio parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static MumbleUDP.Audio parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(MumbleUDP.Audio prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MumbleUDP.Audio}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MumbleUDP.Audio)
        MumbleUDP.AudioOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MumbleUDP.internal_static_MumbleUDP_Audio_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MumbleUDP.internal_static_MumbleUDP_Audio_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MumbleUDP.Audio.class, MumbleUDP.Audio.Builder.class);
      }

      // Construct using MumbleUDP.Audio.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        senderSession_ = 0;

        frameNumber_ = 0L;

        opusData_ = com.google.protobuf.ByteString.EMPTY;

        positionalData_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000001);
        volumeAdjustment_ = 0F;

        isTerminator_ = false;

        headerCase_ = 0;
        header_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MumbleUDP.internal_static_MumbleUDP_Audio_descriptor;
      }

      @java.lang.Override
      public MumbleUDP.Audio getDefaultInstanceForType() {
        return MumbleUDP.Audio.getDefaultInstance();
      }

      @java.lang.Override
      public MumbleUDP.Audio build() {
        MumbleUDP.Audio result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public MumbleUDP.Audio buildPartial() {
        MumbleUDP.Audio result = new MumbleUDP.Audio(this);
        int from_bitField0_ = bitField0_;
        if (headerCase_ == 1) {
          result.header_ = header_;
        }
        if (headerCase_ == 2) {
          result.header_ = header_;
        }
        result.senderSession_ = senderSession_;
        result.frameNumber_ = frameNumber_;
        result.opusData_ = opusData_;
        if (((bitField0_ & 0x00000001) != 0)) {
          positionalData_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.positionalData_ = positionalData_;
        result.volumeAdjustment_ = volumeAdjustment_;
        result.isTerminator_ = isTerminator_;
        result.headerCase_ = headerCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MumbleUDP.Audio) {
          return mergeFrom((MumbleUDP.Audio)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MumbleUDP.Audio other) {
        if (other == MumbleUDP.Audio.getDefaultInstance()) return this;
        if (other.getSenderSession() != 0) {
          setSenderSession(other.getSenderSession());
        }
        if (other.getFrameNumber() != 0L) {
          setFrameNumber(other.getFrameNumber());
        }
        if (other.getOpusData() != com.google.protobuf.ByteString.EMPTY) {
          setOpusData(other.getOpusData());
        }
        if (!other.positionalData_.isEmpty()) {
          if (positionalData_.isEmpty()) {
            positionalData_ = other.positionalData_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePositionalDataIsMutable();
            positionalData_.addAll(other.positionalData_);
          }
          onChanged();
        }
        if (other.getVolumeAdjustment() != 0F) {
          setVolumeAdjustment(other.getVolumeAdjustment());
        }
        if (other.getIsTerminator() != false) {
          setIsTerminator(other.getIsTerminator());
        }
        switch (other.getHeaderCase()) {
          case TARGET: {
            setTarget(other.getTarget());
            break;
          }
          case CONTEXT: {
            setContext(other.getContext());
            break;
          }
          case HEADER_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MumbleUDP.Audio parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MumbleUDP.Audio) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int headerCase_ = 0;
      private java.lang.Object header_;
      public HeaderCase
          getHeaderCase() {
        return HeaderCase.forNumber(
            headerCase_);
      }

      public Builder clearHeader() {
        headerCase_ = 0;
        header_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      /**
       * <pre>
       * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
       * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
       * and all other targets are understood as shout/whisper targets that have previously been registered via a
       * VoiceTarget message (via TCP).
       * </pre>
       *
       * <code>uint32 target = 1;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return headerCase_ == 1;
      }
      /**
       * <pre>
       * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
       * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
       * and all other targets are understood as shout/whisper targets that have previously been registered via a
       * VoiceTarget message (via TCP).
       * </pre>
       *
       * <code>uint32 target = 1;</code>
       * @return The target.
       */
      public int getTarget() {
        if (headerCase_ == 1) {
          return (java.lang.Integer) header_;
        }
        return 0;
      }
      /**
       * <pre>
       * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
       * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
       * and all other targets are understood as shout/whisper targets that have previously been registered via a
       * VoiceTarget message (via TCP).
       * </pre>
       *
       * <code>uint32 target = 1;</code>
       * @param value The target to set.
       * @return This builder for chaining.
       */
      public Builder setTarget(int value) {
        headerCase_ = 1;
        header_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When this audio is sent by the client to the server, this is set to the target of the audio data. This target
       * is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
       * and all other targets are understood as shout/whisper targets that have previously been registered via a
       * VoiceTarget message (via TCP).
       * </pre>
       *
       * <code>uint32 target = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTarget() {
        if (headerCase_ == 1) {
          headerCase_ = 0;
          header_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
       * 0: Normal speech
       * 1: Shout to channel
       * 2: Whisper to user
       * 3: Received via channel listener
       * </pre>
       *
       * <code>uint32 context = 2;</code>
       * @return Whether the context field is set.
       */
      public boolean hasContext() {
        return headerCase_ == 2;
      }
      /**
       * <pre>
       * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
       * 0: Normal speech
       * 1: Shout to channel
       * 2: Whisper to user
       * 3: Received via channel listener
       * </pre>
       *
       * <code>uint32 context = 2;</code>
       * @return The context.
       */
      public int getContext() {
        if (headerCase_ == 2) {
          return (java.lang.Integer) header_;
        }
        return 0;
      }
      /**
       * <pre>
       * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
       * 0: Normal speech
       * 1: Shout to channel
       * 2: Whisper to user
       * 3: Received via channel listener
       * </pre>
       *
       * <code>uint32 context = 2;</code>
       * @param value The context to set.
       * @return This builder for chaining.
       */
      public Builder setContext(int value) {
        headerCase_ = 2;
        header_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
       * 0: Normal speech
       * 1: Shout to channel
       * 2: Whisper to user
       * 3: Received via channel listener
       * </pre>
       *
       * <code>uint32 context = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearContext() {
        if (headerCase_ == 2) {
          headerCase_ = 0;
          header_ = null;
          onChanged();
        }
        return this;
      }

      private int senderSession_ ;
      /**
       * <pre>
       * The session of the client (sender) this audio was originally sent from. This field is not required when sending
       * audio to the server, but will always be set when receiving audio from the server.
       * </pre>
       *
       * <code>uint32 sender_session = 3;</code>
       * @return The senderSession.
       */
      @java.lang.Override
      public int getSenderSession() {
        return senderSession_;
      }
      /**
       * <pre>
       * The session of the client (sender) this audio was originally sent from. This field is not required when sending
       * audio to the server, but will always be set when receiving audio from the server.
       * </pre>
       *
       * <code>uint32 sender_session = 3;</code>
       * @param value The senderSession to set.
       * @return This builder for chaining.
       */
      public Builder setSenderSession(int value) {
        
        senderSession_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The session of the client (sender) this audio was originally sent from. This field is not required when sending
       * audio to the server, but will always be set when receiving audio from the server.
       * </pre>
       *
       * <code>uint32 sender_session = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSenderSession() {
        
        senderSession_ = 0;
        onChanged();
        return this;
      }

      private long frameNumber_ ;
      /**
       * <pre>
       * The number of the first contained audio frame (indicating the position of that frame in the overall audio stream)
       * </pre>
       *
       * <code>uint64 frame_number = 4;</code>
       * @return The frameNumber.
       */
      @java.lang.Override
      public long getFrameNumber() {
        return frameNumber_;
      }
      /**
       * <pre>
       * The number of the first contained audio frame (indicating the position of that frame in the overall audio stream)
       * </pre>
       *
       * <code>uint64 frame_number = 4;</code>
       * @param value The frameNumber to set.
       * @return This builder for chaining.
       */
      public Builder setFrameNumber(long value) {
        
        frameNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of the first contained audio frame (indicating the position of that frame in the overall audio stream)
       * </pre>
       *
       * <code>uint64 frame_number = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFrameNumber() {
        
        frameNumber_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString opusData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The actual voice data payload in the Opus format.
       * </pre>
       *
       * <code>bytes opus_data = 5;</code>
       * @return The opusData.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOpusData() {
        return opusData_;
      }
      /**
       * <pre>
       * The actual voice data payload in the Opus format.
       * </pre>
       *
       * <code>bytes opus_data = 5;</code>
       * @param value The opusData to set.
       * @return This builder for chaining.
       */
      public Builder setOpusData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        opusData_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The actual voice data payload in the Opus format.
       * </pre>
       *
       * <code>bytes opus_data = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearOpusData() {
        
        opusData_ = getDefaultInstance().getOpusData();
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList positionalData_ = emptyFloatList();
      private void ensurePositionalDataIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          positionalData_ = mutableCopy(positionalData_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
       * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
       * </pre>
       *
       * <code>repeated float positional_data = 6;</code>
       * @return A list containing the positionalData.
       */
      public java.util.List<java.lang.Float>
          getPositionalDataList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(positionalData_) : positionalData_;
      }
      /**
       * <pre>
       * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
       * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
       * </pre>
       *
       * <code>repeated float positional_data = 6;</code>
       * @return The count of positionalData.
       */
      public int getPositionalDataCount() {
        return positionalData_.size();
      }
      /**
       * <pre>
       * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
       * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
       * </pre>
       *
       * <code>repeated float positional_data = 6;</code>
       * @param index The index of the element to return.
       * @return The positionalData at the given index.
       */
      public float getPositionalData(int index) {
        return positionalData_.getFloat(index);
      }
      /**
       * <pre>
       * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
       * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
       * </pre>
       *
       * <code>repeated float positional_data = 6;</code>
       * @param index The index to set the value at.
       * @param value The positionalData to set.
       * @return This builder for chaining.
       */
      public Builder setPositionalData(
          int index, float value) {
        ensurePositionalDataIsMutable();
        positionalData_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
       * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
       * </pre>
       *
       * <code>repeated float positional_data = 6;</code>
       * @param value The positionalData to add.
       * @return This builder for chaining.
       */
      public Builder addPositionalData(float value) {
        ensurePositionalDataIsMutable();
        positionalData_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
       * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
       * </pre>
       *
       * <code>repeated float positional_data = 6;</code>
       * @param values The positionalData to add.
       * @return This builder for chaining.
       */
      public Builder addAllPositionalData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensurePositionalDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, positionalData_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
       * expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
       * </pre>
       *
       * <code>repeated float positional_data = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearPositionalData() {
        positionalData_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private float volumeAdjustment_ ;
      /**
       * <pre>
       * A volume adjustment determined by the server for this audio packet. It is up to the client to apply this adjustment to
       * the resulting audio (or not). Note: A value of 0 means that this field is unset.
       * </pre>
       *
       * <code>float volume_adjustment = 7;</code>
       * @return The volumeAdjustment.
       */
      @java.lang.Override
      public float getVolumeAdjustment() {
        return volumeAdjustment_;
      }
      /**
       * <pre>
       * A volume adjustment determined by the server for this audio packet. It is up to the client to apply this adjustment to
       * the resulting audio (or not). Note: A value of 0 means that this field is unset.
       * </pre>
       *
       * <code>float volume_adjustment = 7;</code>
       * @param value The volumeAdjustment to set.
       * @return This builder for chaining.
       */
      public Builder setVolumeAdjustment(float value) {
        
        volumeAdjustment_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A volume adjustment determined by the server for this audio packet. It is up to the client to apply this adjustment to
       * the resulting audio (or not). Note: A value of 0 means that this field is unset.
       * </pre>
       *
       * <code>float volume_adjustment = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearVolumeAdjustment() {
        
        volumeAdjustment_ = 0F;
        onChanged();
        return this;
      }

      private boolean isTerminator_ ;
      /**
       * <pre>
       * A flag indicating whether this audio packet represents the end of transmission for the current audio stream
       * </pre>
       *
       * <code>bool is_terminator = 16;</code>
       * @return The isTerminator.
       */
      @java.lang.Override
      public boolean getIsTerminator() {
        return isTerminator_;
      }
      /**
       * <pre>
       * A flag indicating whether this audio packet represents the end of transmission for the current audio stream
       * </pre>
       *
       * <code>bool is_terminator = 16;</code>
       * @param value The isTerminator to set.
       * @return This builder for chaining.
       */
      public Builder setIsTerminator(boolean value) {
        
        isTerminator_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A flag indicating whether this audio packet represents the end of transmission for the current audio stream
       * </pre>
       *
       * <code>bool is_terminator = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsTerminator() {
        
        isTerminator_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:MumbleUDP.Audio)
    }

    // @@protoc_insertion_point(class_scope:MumbleUDP.Audio)
    private static final MumbleUDP.Audio DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new MumbleUDP.Audio();
    }

    public static MumbleUDP.Audio getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Audio>
        PARSER = new com.google.protobuf.AbstractParser<Audio>() {
      @java.lang.Override
      public Audio parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Audio(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Audio> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Audio> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public MumbleUDP.Audio getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MumbleUDP.Ping)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Timestamp as encoded by the client. A server is not supposed to attempt to decode or modify this field. Therefore,
     * clients may choose an arbitrary format for this timestamp (as long as it fits into a uint64 field).
     * </pre>
     *
     * <code>uint64 timestamp = 1;</code>
     * @return The timestamp.
     */
    long getTimestamp();

    /**
     * <pre>
     * A flag set by the sending client, if it wants to obtain additional information about the server.
     * </pre>
     *
     * <code>bool request_extended_information = 2;</code>
     * @return The requestExtendedInformation.
     */
    boolean getRequestExtendedInformation();

    /**
     * <pre>
     * The version of the server in the new version format.
     * The new protobuf Ping packet introduced with 1.5 drops support for the legacy version format
     * since both server and client have to support this new format.
     * (See https://github.com/mumble-voip/mumble/issues/5827)
     * </pre>
     *
     * <code>uint64 server_version_v2 = 3;</code>
     * @return The serverVersionV2.
     */
    long getServerVersionV2();

    /**
     * <pre>
     * The amount of users currently connected to the server
     * </pre>
     *
     * <code>uint32 user_count = 4;</code>
     * @return The userCount.
     */
    int getUserCount();

    /**
     * <pre>
     * The maximum amount of users permitted on this server
     * </pre>
     *
     * <code>uint32 max_user_count = 5;</code>
     * @return The maxUserCount.
     */
    int getMaxUserCount();

    /**
     * <pre>
     * The maximum bandwidth each user is allowed to use for sending audio to the server
     * </pre>
     *
     * <code>uint32 max_bandwidth_per_user = 6;</code>
     * @return The maxBandwidthPerUser.
     */
    int getMaxBandwidthPerUser();
  }
  /**
   * <pre>
   **
   * Ping message for checking UDP connectivity (and roundtrip ping) and potentially obtaining further server
   * details (e.g. version).
   * </pre>
   *
   * Protobuf type {@code MumbleUDP.Ping}
   */
  public static final class Ping extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MumbleUDP.Ping)
      PingOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Ping.newBuilder() to construct.
    private Ping(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Ping() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Ping();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Ping(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 16: {

              requestExtendedInformation_ = input.readBool();
              break;
            }
            case 24: {

              serverVersionV2_ = input.readUInt64();
              break;
            }
            case 32: {

              userCount_ = input.readUInt32();
              break;
            }
            case 40: {

              maxUserCount_ = input.readUInt32();
              break;
            }
            case 48: {

              maxBandwidthPerUser_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MumbleUDP.internal_static_MumbleUDP_Ping_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MumbleUDP.internal_static_MumbleUDP_Ping_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MumbleUDP.Ping.class, MumbleUDP.Ping.Builder.class);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <pre>
     * Timestamp as encoded by the client. A server is not supposed to attempt to decode or modify this field. Therefore,
     * clients may choose an arbitrary format for this timestamp (as long as it fits into a uint64 field).
     * </pre>
     *
     * <code>uint64 timestamp = 1;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int REQUEST_EXTENDED_INFORMATION_FIELD_NUMBER = 2;
    private boolean requestExtendedInformation_;
    /**
     * <pre>
     * A flag set by the sending client, if it wants to obtain additional information about the server.
     * </pre>
     *
     * <code>bool request_extended_information = 2;</code>
     * @return The requestExtendedInformation.
     */
    @java.lang.Override
    public boolean getRequestExtendedInformation() {
      return requestExtendedInformation_;
    }

    public static final int SERVER_VERSION_V2_FIELD_NUMBER = 3;
    private long serverVersionV2_;
    /**
     * <pre>
     * The version of the server in the new version format.
     * The new protobuf Ping packet introduced with 1.5 drops support for the legacy version format
     * since both server and client have to support this new format.
     * (See https://github.com/mumble-voip/mumble/issues/5827)
     * </pre>
     *
     * <code>uint64 server_version_v2 = 3;</code>
     * @return The serverVersionV2.
     */
    @java.lang.Override
    public long getServerVersionV2() {
      return serverVersionV2_;
    }

    public static final int USER_COUNT_FIELD_NUMBER = 4;
    private int userCount_;
    /**
     * <pre>
     * The amount of users currently connected to the server
     * </pre>
     *
     * <code>uint32 user_count = 4;</code>
     * @return The userCount.
     */
    @java.lang.Override
    public int getUserCount() {
      return userCount_;
    }

    public static final int MAX_USER_COUNT_FIELD_NUMBER = 5;
    private int maxUserCount_;
    /**
     * <pre>
     * The maximum amount of users permitted on this server
     * </pre>
     *
     * <code>uint32 max_user_count = 5;</code>
     * @return The maxUserCount.
     */
    @java.lang.Override
    public int getMaxUserCount() {
      return maxUserCount_;
    }

    public static final int MAX_BANDWIDTH_PER_USER_FIELD_NUMBER = 6;
    private int maxBandwidthPerUser_;
    /**
     * <pre>
     * The maximum bandwidth each user is allowed to use for sending audio to the server
     * </pre>
     *
     * <code>uint32 max_bandwidth_per_user = 6;</code>
     * @return The maxBandwidthPerUser.
     */
    @java.lang.Override
    public int getMaxBandwidthPerUser() {
      return maxBandwidthPerUser_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (requestExtendedInformation_ != false) {
        output.writeBool(2, requestExtendedInformation_);
      }
      if (serverVersionV2_ != 0L) {
        output.writeUInt64(3, serverVersionV2_);
      }
      if (userCount_ != 0) {
        output.writeUInt32(4, userCount_);
      }
      if (maxUserCount_ != 0) {
        output.writeUInt32(5, maxUserCount_);
      }
      if (maxBandwidthPerUser_ != 0) {
        output.writeUInt32(6, maxBandwidthPerUser_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (requestExtendedInformation_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, requestExtendedInformation_);
      }
      if (serverVersionV2_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, serverVersionV2_);
      }
      if (userCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, userCount_);
      }
      if (maxUserCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, maxUserCount_);
      }
      if (maxBandwidthPerUser_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, maxBandwidthPerUser_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof MumbleUDP.Ping)) {
        return super.equals(obj);
      }
      MumbleUDP.Ping other = (MumbleUDP.Ping) obj;

      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (getRequestExtendedInformation()
          != other.getRequestExtendedInformation()) return false;
      if (getServerVersionV2()
          != other.getServerVersionV2()) return false;
      if (getUserCount()
          != other.getUserCount()) return false;
      if (getMaxUserCount()
          != other.getMaxUserCount()) return false;
      if (getMaxBandwidthPerUser()
          != other.getMaxBandwidthPerUser()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + REQUEST_EXTENDED_INFORMATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getRequestExtendedInformation());
      hash = (37 * hash) + SERVER_VERSION_V2_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getServerVersionV2());
      hash = (37 * hash) + USER_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getUserCount();
      hash = (37 * hash) + MAX_USER_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getMaxUserCount();
      hash = (37 * hash) + MAX_BANDWIDTH_PER_USER_FIELD_NUMBER;
      hash = (53 * hash) + getMaxBandwidthPerUser();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static MumbleUDP.Ping parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MumbleUDP.Ping parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MumbleUDP.Ping parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MumbleUDP.Ping parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MumbleUDP.Ping parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MumbleUDP.Ping parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MumbleUDP.Ping parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static MumbleUDP.Ping parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static MumbleUDP.Ping parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static MumbleUDP.Ping parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static MumbleUDP.Ping parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static MumbleUDP.Ping parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(MumbleUDP.Ping prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     * Ping message for checking UDP connectivity (and roundtrip ping) and potentially obtaining further server
     * details (e.g. version).
     * </pre>
     *
     * Protobuf type {@code MumbleUDP.Ping}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MumbleUDP.Ping)
        MumbleUDP.PingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MumbleUDP.internal_static_MumbleUDP_Ping_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MumbleUDP.internal_static_MumbleUDP_Ping_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MumbleUDP.Ping.class, MumbleUDP.Ping.Builder.class);
      }

      // Construct using MumbleUDP.Ping.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        timestamp_ = 0L;

        requestExtendedInformation_ = false;

        serverVersionV2_ = 0L;

        userCount_ = 0;

        maxUserCount_ = 0;

        maxBandwidthPerUser_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MumbleUDP.internal_static_MumbleUDP_Ping_descriptor;
      }

      @java.lang.Override
      public MumbleUDP.Ping getDefaultInstanceForType() {
        return MumbleUDP.Ping.getDefaultInstance();
      }

      @java.lang.Override
      public MumbleUDP.Ping build() {
        MumbleUDP.Ping result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public MumbleUDP.Ping buildPartial() {
        MumbleUDP.Ping result = new MumbleUDP.Ping(this);
        result.timestamp_ = timestamp_;
        result.requestExtendedInformation_ = requestExtendedInformation_;
        result.serverVersionV2_ = serverVersionV2_;
        result.userCount_ = userCount_;
        result.maxUserCount_ = maxUserCount_;
        result.maxBandwidthPerUser_ = maxBandwidthPerUser_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MumbleUDP.Ping) {
          return mergeFrom((MumbleUDP.Ping)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MumbleUDP.Ping other) {
        if (other == MumbleUDP.Ping.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getRequestExtendedInformation() != false) {
          setRequestExtendedInformation(other.getRequestExtendedInformation());
        }
        if (other.getServerVersionV2() != 0L) {
          setServerVersionV2(other.getServerVersionV2());
        }
        if (other.getUserCount() != 0) {
          setUserCount(other.getUserCount());
        }
        if (other.getMaxUserCount() != 0) {
          setMaxUserCount(other.getMaxUserCount());
        }
        if (other.getMaxBandwidthPerUser() != 0) {
          setMaxBandwidthPerUser(other.getMaxBandwidthPerUser());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MumbleUDP.Ping parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MumbleUDP.Ping) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * Timestamp as encoded by the client. A server is not supposed to attempt to decode or modify this field. Therefore,
       * clients may choose an arbitrary format for this timestamp (as long as it fits into a uint64 field).
       * </pre>
       *
       * <code>uint64 timestamp = 1;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * Timestamp as encoded by the client. A server is not supposed to attempt to decode or modify this field. Therefore,
       * clients may choose an arbitrary format for this timestamp (as long as it fits into a uint64 field).
       * </pre>
       *
       * <code>uint64 timestamp = 1;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Timestamp as encoded by the client. A server is not supposed to attempt to decode or modify this field. Therefore,
       * clients may choose an arbitrary format for this timestamp (as long as it fits into a uint64 field).
       * </pre>
       *
       * <code>uint64 timestamp = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private boolean requestExtendedInformation_ ;
      /**
       * <pre>
       * A flag set by the sending client, if it wants to obtain additional information about the server.
       * </pre>
       *
       * <code>bool request_extended_information = 2;</code>
       * @return The requestExtendedInformation.
       */
      @java.lang.Override
      public boolean getRequestExtendedInformation() {
        return requestExtendedInformation_;
      }
      /**
       * <pre>
       * A flag set by the sending client, if it wants to obtain additional information about the server.
       * </pre>
       *
       * <code>bool request_extended_information = 2;</code>
       * @param value The requestExtendedInformation to set.
       * @return This builder for chaining.
       */
      public Builder setRequestExtendedInformation(boolean value) {
        
        requestExtendedInformation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A flag set by the sending client, if it wants to obtain additional information about the server.
       * </pre>
       *
       * <code>bool request_extended_information = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRequestExtendedInformation() {
        
        requestExtendedInformation_ = false;
        onChanged();
        return this;
      }

      private long serverVersionV2_ ;
      /**
       * <pre>
       * The version of the server in the new version format.
       * The new protobuf Ping packet introduced with 1.5 drops support for the legacy version format
       * since both server and client have to support this new format.
       * (See https://github.com/mumble-voip/mumble/issues/5827)
       * </pre>
       *
       * <code>uint64 server_version_v2 = 3;</code>
       * @return The serverVersionV2.
       */
      @java.lang.Override
      public long getServerVersionV2() {
        return serverVersionV2_;
      }
      /**
       * <pre>
       * The version of the server in the new version format.
       * The new protobuf Ping packet introduced with 1.5 drops support for the legacy version format
       * since both server and client have to support this new format.
       * (See https://github.com/mumble-voip/mumble/issues/5827)
       * </pre>
       *
       * <code>uint64 server_version_v2 = 3;</code>
       * @param value The serverVersionV2 to set.
       * @return This builder for chaining.
       */
      public Builder setServerVersionV2(long value) {
        
        serverVersionV2_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The version of the server in the new version format.
       * The new protobuf Ping packet introduced with 1.5 drops support for the legacy version format
       * since both server and client have to support this new format.
       * (See https://github.com/mumble-voip/mumble/issues/5827)
       * </pre>
       *
       * <code>uint64 server_version_v2 = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearServerVersionV2() {
        
        serverVersionV2_ = 0L;
        onChanged();
        return this;
      }

      private int userCount_ ;
      /**
       * <pre>
       * The amount of users currently connected to the server
       * </pre>
       *
       * <code>uint32 user_count = 4;</code>
       * @return The userCount.
       */
      @java.lang.Override
      public int getUserCount() {
        return userCount_;
      }
      /**
       * <pre>
       * The amount of users currently connected to the server
       * </pre>
       *
       * <code>uint32 user_count = 4;</code>
       * @param value The userCount to set.
       * @return This builder for chaining.
       */
      public Builder setUserCount(int value) {
        
        userCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The amount of users currently connected to the server
       * </pre>
       *
       * <code>uint32 user_count = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearUserCount() {
        
        userCount_ = 0;
        onChanged();
        return this;
      }

      private int maxUserCount_ ;
      /**
       * <pre>
       * The maximum amount of users permitted on this server
       * </pre>
       *
       * <code>uint32 max_user_count = 5;</code>
       * @return The maxUserCount.
       */
      @java.lang.Override
      public int getMaxUserCount() {
        return maxUserCount_;
      }
      /**
       * <pre>
       * The maximum amount of users permitted on this server
       * </pre>
       *
       * <code>uint32 max_user_count = 5;</code>
       * @param value The maxUserCount to set.
       * @return This builder for chaining.
       */
      public Builder setMaxUserCount(int value) {
        
        maxUserCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum amount of users permitted on this server
       * </pre>
       *
       * <code>uint32 max_user_count = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxUserCount() {
        
        maxUserCount_ = 0;
        onChanged();
        return this;
      }

      private int maxBandwidthPerUser_ ;
      /**
       * <pre>
       * The maximum bandwidth each user is allowed to use for sending audio to the server
       * </pre>
       *
       * <code>uint32 max_bandwidth_per_user = 6;</code>
       * @return The maxBandwidthPerUser.
       */
      @java.lang.Override
      public int getMaxBandwidthPerUser() {
        return maxBandwidthPerUser_;
      }
      /**
       * <pre>
       * The maximum bandwidth each user is allowed to use for sending audio to the server
       * </pre>
       *
       * <code>uint32 max_bandwidth_per_user = 6;</code>
       * @param value The maxBandwidthPerUser to set.
       * @return This builder for chaining.
       */
      public Builder setMaxBandwidthPerUser(int value) {
        
        maxBandwidthPerUser_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The maximum bandwidth each user is allowed to use for sending audio to the server
       * </pre>
       *
       * <code>uint32 max_bandwidth_per_user = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxBandwidthPerUser() {
        
        maxBandwidthPerUser_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:MumbleUDP.Ping)
    }

    // @@protoc_insertion_point(class_scope:MumbleUDP.Ping)
    private static final MumbleUDP.Ping DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new MumbleUDP.Ping();
    }

    public static MumbleUDP.Ping getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Ping>
        PARSER = new com.google.protobuf.AbstractParser<Ping>() {
      @java.lang.Override
      public Ping parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ping(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Ping> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Ping> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public MumbleUDP.Ping getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MumbleUDP_Audio_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MumbleUDP_Audio_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MumbleUDP_Ping_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MumbleUDP_Ping_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017MumbleUDP.proto\022\tMumbleUDP\"\302\001\n\005Audio\022\020" +
      "\n\006target\030\001 \001(\rH\000\022\021\n\007context\030\002 \001(\rH\000\022\026\n\016s" +
      "ender_session\030\003 \001(\r\022\024\n\014frame_number\030\004 \001(" +
      "\004\022\021\n\topus_data\030\005 \001(\014\022\027\n\017positional_data\030" +
      "\006 \003(\002\022\031\n\021volume_adjustment\030\007 \001(\002\022\025\n\ris_t" +
      "erminator\030\020 \001(\010B\010\n\006Header\"\246\001\n\004Ping\022\021\n\tti" +
      "mestamp\030\001 \001(\004\022$\n\034request_extended_inform" +
      "ation\030\002 \001(\010\022\031\n\021server_version_v2\030\003 \001(\004\022\022" +
      "\n\nuser_count\030\004 \001(\r\022\026\n\016max_user_count\030\005 \001" +
      "(\r\022\036\n\026max_bandwidth_per_user\030\006 \001(\rB\002H\001b\006" +
      "proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_MumbleUDP_Audio_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_MumbleUDP_Audio_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MumbleUDP_Audio_descriptor,
        new java.lang.String[] { "Target", "Context", "SenderSession", "FrameNumber", "OpusData", "PositionalData", "VolumeAdjustment", "IsTerminator", "Header", });
    internal_static_MumbleUDP_Ping_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_MumbleUDP_Ping_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MumbleUDP_Ping_descriptor,
        new java.lang.String[] { "Timestamp", "RequestExtendedInformation", "ServerVersionV2", "UserCount", "MaxUserCount", "MaxBandwidthPerUser", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
